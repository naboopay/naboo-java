/*
 * NabooApi V1
 * Here you have the first version of the naboo api to create checkout automatically
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DeleteTransactionRequest;
import org.openapitools.client.model.DeleteTransactionResponse;
import org.openapitools.client.model.GetAllTransaction;
import org.openapitools.client.model.GetOneTransaction;
import org.openapitools.client.model.HTTPValidationError;
import org.openapitools.client.model.TransactionRequest;
import org.openapitools.client.model.TransactionResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TransactionApi
 */
@Disabled
public class TransactionApiTest {

    private final TransactionApi api = new TransactionApi();

    /**
     * Create Transaction
     *
     * This endpoint allows authenticated users to create a transaction by submitting a request with the necessary details. The endpoint ensures that the user&#39;s access level permits transaction creation and enforces a rate limit of 30 requests. It checks that the number of products is within the allowed range (1-20) and calculates the total transaction amount, applying a 20% charge for escrow transactions. It also verifies that the total amount does not exceed a specific threshold (2,000,000). The user&#39;s IP address and browser information are logged, and the transaction details are saved with relevant metadata, including a unique order ID and the associated account state. If any conditions are not met, appropriate error messages are returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTransactionTransactionCreateTransactionPostTest() throws ApiException {
        TransactionRequest transactionRequest = null;
        TransactionResponse response = api.createTransactionTransactionCreateTransactionPost(transactionRequest);
        // TODO: test validations
    }

    /**
     * Delete Transaction
     *
     * This endpoint allows authenticated users to delete a transaction by submitting a request with the necessary details. The endpoint checks the user&#39;s access level to ensure they have permission to delete transactions and enforces a rate limit of 30 requests. It verifies that the transaction belongs to the user and has not already been deleted or withdrawn. If the transaction is paid and has a payment reference, it processes refunds and updates the user&#39;s account balance accordingly.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTransactionTransactionDeleteTransactionDeleteTest() throws ApiException {
        DeleteTransactionRequest deleteTransactionRequest = null;
        DeleteTransactionResponse response = api.deleteTransactionTransactionDeleteTransactionDelete(deleteTransactionRequest);
        // TODO: test validations
    }

    /**
     * Get One Transaction
     *
     * This endpoint allows authenticated users to retrieve the details of a specific transaction using the order ID. The endpoint ensures the user has read access and enforces a rate limit of 30 requests. It checks if the transaction exists in the database and if the user has the appropriate access rights,then provides a checkout URL for the transaction and others informations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOneTransactionTransactionGetOneTransactionGetTest() throws ApiException {
        String orderId = null;
        GetOneTransaction response = api.getOneTransactionTransactionGetOneTransactionGet(orderId);
        // TODO: test validations
    }

    /**
     * Get Transactions
     *
     * This endpoint allows authenticated users to retrieve a list of their visible transactions, up to a maximum of 50. The endpoint enforces a rate limit of 30 requests and ensures the user has read access.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTransactionsTransactionGetTransactionsGetTest() throws ApiException {
        GetAllTransaction response = api.getTransactionsTransactionGetTransactionsGet();
        // TODO: test validations
    }

}
