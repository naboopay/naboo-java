/*
 * NabooApi V1
 * Here you have the first version of the naboo api to create checkout automatically
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ProductModel;
import org.openapitools.client.model.Wallet;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TransactionRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-29T10:23:31.575940Z[Africa/Freetown]", comments = "Generator version: 7.9.0")
public class TransactionRequest {
  public static final String SERIALIZED_NAME_METHOD_OF_PAYMENT = "method_of_payment";
  @SerializedName(SERIALIZED_NAME_METHOD_OF_PAYMENT)
  private List<Wallet> methodOfPayment = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRODUCTS = "products";
  @SerializedName(SERIALIZED_NAME_PRODUCTS)
  private List<ProductModel> products;

  public static final String SERIALIZED_NAME_SUCCESS_URL = "success_url";
  @SerializedName(SERIALIZED_NAME_SUCCESS_URL)
  private String successUrl;

  public static final String SERIALIZED_NAME_ERROR_URL = "error_url";
  @SerializedName(SERIALIZED_NAME_ERROR_URL)
  private String errorUrl;

  public static final String SERIALIZED_NAME_IS_ESCROW = "is_escrow";
  @SerializedName(SERIALIZED_NAME_IS_ESCROW)
  private Boolean isEscrow = false;

  public static final String SERIALIZED_NAME_IS_MERCHANT = "is_merchant";
  @SerializedName(SERIALIZED_NAME_IS_MERCHANT)
  private Boolean isMerchant = false;

  public TransactionRequest() {
  }

  public TransactionRequest methodOfPayment(List<Wallet> methodOfPayment) {
    this.methodOfPayment = methodOfPayment;
    return this;
  }

  public TransactionRequest addMethodOfPaymentItem(Wallet methodOfPaymentItem) {
    if (this.methodOfPayment == null) {
      this.methodOfPayment = new ArrayList<>();
    }
    this.methodOfPayment.add(methodOfPaymentItem);
    return this;
  }

  /**
   * Get methodOfPayment
   * @return methodOfPayment
   */
  @javax.annotation.Nonnull
  public List<Wallet> getMethodOfPayment() {
    return methodOfPayment;
  }

  public void setMethodOfPayment(List<Wallet> methodOfPayment) {
    this.methodOfPayment = methodOfPayment;
  }


  public TransactionRequest products(List<ProductModel> products) {
    this.products = products;
    return this;
  }

  public TransactionRequest addProductsItem(ProductModel productsItem) {
    if (this.products == null) {
      this.products = new ArrayList<>();
    }
    this.products.add(productsItem);
    return this;
  }

  /**
   * Get products
   * @return products
   */
  @javax.annotation.Nullable
  public List<ProductModel> getProducts() {
    return products;
  }

  public void setProducts(List<ProductModel> products) {
    this.products = products;
  }


  public TransactionRequest successUrl(String successUrl) {
    this.successUrl = successUrl;
    return this;
  }

  /**
   * Get successUrl
   * @return successUrl
   */
  @javax.annotation.Nullable
  public String getSuccessUrl() {
    return successUrl;
  }

  public void setSuccessUrl(String successUrl) {
    this.successUrl = successUrl;
  }


  public TransactionRequest errorUrl(String errorUrl) {
    this.errorUrl = errorUrl;
    return this;
  }

  /**
   * Get errorUrl
   * @return errorUrl
   */
  @javax.annotation.Nullable
  public String getErrorUrl() {
    return errorUrl;
  }

  public void setErrorUrl(String errorUrl) {
    this.errorUrl = errorUrl;
  }


  public TransactionRequest isEscrow(Boolean isEscrow) {
    this.isEscrow = isEscrow;
    return this;
  }

  /**
   * Get isEscrow
   * @return isEscrow
   */
  @javax.annotation.Nullable
  public Boolean getIsEscrow() {
    return isEscrow;
  }

  public void setIsEscrow(Boolean isEscrow) {
    this.isEscrow = isEscrow;
  }


  public TransactionRequest isMerchant(Boolean isMerchant) {
    this.isMerchant = isMerchant;
    return this;
  }

  /**
   * Get isMerchant
   * @return isMerchant
   */
  @javax.annotation.Nullable
  public Boolean getIsMerchant() {
    return isMerchant;
  }

  public void setIsMerchant(Boolean isMerchant) {
    this.isMerchant = isMerchant;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionRequest transactionRequest = (TransactionRequest) o;
    return Objects.equals(this.methodOfPayment, transactionRequest.methodOfPayment) &&
        Objects.equals(this.products, transactionRequest.products) &&
        Objects.equals(this.successUrl, transactionRequest.successUrl) &&
        Objects.equals(this.errorUrl, transactionRequest.errorUrl) &&
        Objects.equals(this.isEscrow, transactionRequest.isEscrow) &&
        Objects.equals(this.isMerchant, transactionRequest.isMerchant);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(methodOfPayment, products, successUrl, errorUrl, isEscrow, isMerchant);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionRequest {\n");
    sb.append("    methodOfPayment: ").append(toIndentedString(methodOfPayment)).append("\n");
    sb.append("    products: ").append(toIndentedString(products)).append("\n");
    sb.append("    successUrl: ").append(toIndentedString(successUrl)).append("\n");
    sb.append("    errorUrl: ").append(toIndentedString(errorUrl)).append("\n");
    sb.append("    isEscrow: ").append(toIndentedString(isEscrow)).append("\n");
    sb.append("    isMerchant: ").append(toIndentedString(isMerchant)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("method_of_payment");
    openapiFields.add("products");
    openapiFields.add("success_url");
    openapiFields.add("error_url");
    openapiFields.add("is_escrow");
    openapiFields.add("is_merchant");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("method_of_payment");
    openapiRequiredFields.add("products");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransactionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransactionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactionRequest is not found in the empty JSON string", TransactionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransactionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransactionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TransactionRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("method_of_payment") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("method_of_payment").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `method_of_payment` to be an array in the JSON string but got `%s`", jsonObj.get("method_of_payment").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("products").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `products` to be an array in the JSON string but got `%s`", jsonObj.get("products").toString()));
      }

      JsonArray jsonArrayproducts = jsonObj.getAsJsonArray("products");
      // validate the required field `products` (array)
      for (int i = 0; i < jsonArrayproducts.size(); i++) {
        ProductModel.validateJsonElement(jsonArrayproducts.get(i));
      };
      if ((jsonObj.get("success_url") != null && !jsonObj.get("success_url").isJsonNull()) && !jsonObj.get("success_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `success_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("success_url").toString()));
      }
      if ((jsonObj.get("error_url") != null && !jsonObj.get("error_url").isJsonNull()) && !jsonObj.get("error_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactionRequest>() {
           @Override
           public void write(JsonWriter out, TransactionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransactionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransactionRequest
   * @throws IOException if the JSON string is invalid with respect to TransactionRequest
   */
  public static TransactionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionRequest.class);
  }

  /**
   * Convert an instance of TransactionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

