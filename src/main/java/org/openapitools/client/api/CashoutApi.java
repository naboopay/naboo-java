/*
 * NabooApi V1
 * Here you have the first version of the naboo api to create checkout automatically
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CashOutOrangeRequest;
import org.openapitools.client.model.CashOutResponse;
import org.openapitools.client.model.CashOutWaveRequest;
import org.openapitools.client.model.HTTPValidationError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CashoutApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CashoutApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CashoutApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cashOutOrangeMoneyCashoutOrangeMoneyPost
     * @param cashOutOrangeRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was invalid or malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The user is not authorized to make this request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user does not have permission to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected internal server error occurred. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cashOutOrangeMoneyCashoutOrangeMoneyPostCall(CashOutOrangeRequest cashOutOrangeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cashOutOrangeRequest;

        // create path and map variables
        String localVarPath = "/cashout/orange-money";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cashOutOrangeMoneyCashoutOrangeMoneyPostValidateBeforeCall(CashOutOrangeRequest cashOutOrangeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cashOutOrangeRequest' is set
        if (cashOutOrangeRequest == null) {
            throw new ApiException("Missing the required parameter 'cashOutOrangeRequest' when calling cashOutOrangeMoneyCashoutOrangeMoneyPost(Async)");
        }

        return cashOutOrangeMoneyCashoutOrangeMoneyPostCall(cashOutOrangeRequest, _callback);

    }

    /**
     * Cash Out Orange Money
     * This endpoint enables a user to withdraw funds from their NabooPay account to their Orange Money account. Authentication is required, and users with the &#39;dev&#39; role are not permitted to perform this operation. The amount to be withdrawn must be positive and within the user&#39;s available balance. The user&#39;s account must be active and registered in the system. After validation, the user&#39;s account balance is adjusted accordingly, and the transaction is logged for record-keeping.
     * @param cashOutOrangeRequest  (required)
     * @return CashOutResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was invalid or malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The user is not authorized to make this request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user does not have permission to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected internal server error occurred. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public CashOutResponse cashOutOrangeMoneyCashoutOrangeMoneyPost(CashOutOrangeRequest cashOutOrangeRequest) throws ApiException {
        ApiResponse<CashOutResponse> localVarResp = cashOutOrangeMoneyCashoutOrangeMoneyPostWithHttpInfo(cashOutOrangeRequest);
        return localVarResp.getData();
    }

    /**
     * Cash Out Orange Money
     * This endpoint enables a user to withdraw funds from their NabooPay account to their Orange Money account. Authentication is required, and users with the &#39;dev&#39; role are not permitted to perform this operation. The amount to be withdrawn must be positive and within the user&#39;s available balance. The user&#39;s account must be active and registered in the system. After validation, the user&#39;s account balance is adjusted accordingly, and the transaction is logged for record-keeping.
     * @param cashOutOrangeRequest  (required)
     * @return ApiResponse&lt;CashOutResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was invalid or malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The user is not authorized to make this request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user does not have permission to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected internal server error occurred. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CashOutResponse> cashOutOrangeMoneyCashoutOrangeMoneyPostWithHttpInfo(CashOutOrangeRequest cashOutOrangeRequest) throws ApiException {
        okhttp3.Call localVarCall = cashOutOrangeMoneyCashoutOrangeMoneyPostValidateBeforeCall(cashOutOrangeRequest, null);
        Type localVarReturnType = new TypeToken<CashOutResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cash Out Orange Money (asynchronously)
     * This endpoint enables a user to withdraw funds from their NabooPay account to their Orange Money account. Authentication is required, and users with the &#39;dev&#39; role are not permitted to perform this operation. The amount to be withdrawn must be positive and within the user&#39;s available balance. The user&#39;s account must be active and registered in the system. After validation, the user&#39;s account balance is adjusted accordingly, and the transaction is logged for record-keeping.
     * @param cashOutOrangeRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was invalid or malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The user is not authorized to make this request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user does not have permission to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected internal server error occurred. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cashOutOrangeMoneyCashoutOrangeMoneyPostAsync(CashOutOrangeRequest cashOutOrangeRequest, final ApiCallback<CashOutResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = cashOutOrangeMoneyCashoutOrangeMoneyPostValidateBeforeCall(cashOutOrangeRequest, _callback);
        Type localVarReturnType = new TypeToken<CashOutResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cashOutWaveCashoutWavePost
     * @param cashOutWaveRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was invalid or malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The user is not authorized to make this request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user does not have permission to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected internal server error occurred. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cashOutWaveCashoutWavePostCall(CashOutWaveRequest cashOutWaveRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cashOutWaveRequest;

        // create path and map variables
        String localVarPath = "/cashout/wave";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cashOutWaveCashoutWavePostValidateBeforeCall(CashOutWaveRequest cashOutWaveRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cashOutWaveRequest' is set
        if (cashOutWaveRequest == null) {
            throw new ApiException("Missing the required parameter 'cashOutWaveRequest' when calling cashOutWaveCashoutWavePost(Async)");
        }

        return cashOutWaveCashoutWavePostCall(cashOutWaveRequest, _callback);

    }

    /**
     * Cash Out Wave
     * This endpoint allows a user to withdraw funds from their NabooPay account to their Wave account. The user must be authenticated and not possess the &#39;dev&#39; role. The withdrawal amount must be greater than 10 and not exceed the user&#39;s account balance. The user&#39;s account must exist and be active. Upon successful validation, the system updates the user&#39;s account balance and records the transaction for tracking purposes.
     * @param cashOutWaveRequest  (required)
     * @return CashOutResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was invalid or malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The user is not authorized to make this request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user does not have permission to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected internal server error occurred. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public CashOutResponse cashOutWaveCashoutWavePost(CashOutWaveRequest cashOutWaveRequest) throws ApiException {
        ApiResponse<CashOutResponse> localVarResp = cashOutWaveCashoutWavePostWithHttpInfo(cashOutWaveRequest);
        return localVarResp.getData();
    }

    /**
     * Cash Out Wave
     * This endpoint allows a user to withdraw funds from their NabooPay account to their Wave account. The user must be authenticated and not possess the &#39;dev&#39; role. The withdrawal amount must be greater than 10 and not exceed the user&#39;s account balance. The user&#39;s account must exist and be active. Upon successful validation, the system updates the user&#39;s account balance and records the transaction for tracking purposes.
     * @param cashOutWaveRequest  (required)
     * @return ApiResponse&lt;CashOutResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was invalid or malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The user is not authorized to make this request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user does not have permission to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected internal server error occurred. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CashOutResponse> cashOutWaveCashoutWavePostWithHttpInfo(CashOutWaveRequest cashOutWaveRequest) throws ApiException {
        okhttp3.Call localVarCall = cashOutWaveCashoutWavePostValidateBeforeCall(cashOutWaveRequest, null);
        Type localVarReturnType = new TypeToken<CashOutResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cash Out Wave (asynchronously)
     * This endpoint allows a user to withdraw funds from their NabooPay account to their Wave account. The user must be authenticated and not possess the &#39;dev&#39; role. The withdrawal amount must be greater than 10 and not exceed the user&#39;s account balance. The user&#39;s account must exist and be active. Upon successful validation, the system updates the user&#39;s account balance and records the transaction for tracking purposes.
     * @param cashOutWaveRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was invalid or malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The user is not authorized to make this request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user does not have permission to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected internal server error occurred. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cashOutWaveCashoutWavePostAsync(CashOutWaveRequest cashOutWaveRequest, final ApiCallback<CashOutResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = cashOutWaveCashoutWavePostValidateBeforeCall(cashOutWaveRequest, _callback);
        Type localVarReturnType = new TypeToken<CashOutResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
