/*
 * NabooApi V1
 * Here you have the first version of the naboo api to create checkout automatically
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DeleteTransactionRequest;
import org.openapitools.client.model.DeleteTransactionResponse;
import org.openapitools.client.model.GetAllTransaction;
import org.openapitools.client.model.GetOneTransaction;
import org.openapitools.client.model.HTTPValidationError;
import org.openapitools.client.model.TransactionRequest;
import org.openapitools.client.model.TransactionResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransactionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TransactionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TransactionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createTransactionTransactionCreateTransactionPost
     * @param transactionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was invalid or malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The user is not authorized to make this request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user does not have permission to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected internal server error occurred. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTransactionTransactionCreateTransactionPostCall(TransactionRequest transactionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transactionRequest;

        // create path and map variables
        String localVarPath = "/transaction/create-transaction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTransactionTransactionCreateTransactionPostValidateBeforeCall(TransactionRequest transactionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transactionRequest' is set
        if (transactionRequest == null) {
            throw new ApiException("Missing the required parameter 'transactionRequest' when calling createTransactionTransactionCreateTransactionPost(Async)");
        }

        return createTransactionTransactionCreateTransactionPostCall(transactionRequest, _callback);

    }

    /**
     * Create Transaction
     * This endpoint allows authenticated users to create a transaction by submitting a request with the necessary details. The endpoint ensures that the user&#39;s access level permits transaction creation and enforces a rate limit of 30 requests. It checks that the number of products is within the allowed range (1-20) and calculates the total transaction amount, applying a 20% charge for escrow transactions. It also verifies that the total amount does not exceed a specific threshold (2,000,000). The user&#39;s IP address and browser information are logged, and the transaction details are saved with relevant metadata, including a unique order ID and the associated account state. If any conditions are not met, appropriate error messages are returned.
     * @param transactionRequest  (required)
     * @return TransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was invalid or malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The user is not authorized to make this request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user does not have permission to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected internal server error occurred. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public TransactionResponse createTransactionTransactionCreateTransactionPost(TransactionRequest transactionRequest) throws ApiException {
        ApiResponse<TransactionResponse> localVarResp = createTransactionTransactionCreateTransactionPostWithHttpInfo(transactionRequest);
        return localVarResp.getData();
    }

    /**
     * Create Transaction
     * This endpoint allows authenticated users to create a transaction by submitting a request with the necessary details. The endpoint ensures that the user&#39;s access level permits transaction creation and enforces a rate limit of 30 requests. It checks that the number of products is within the allowed range (1-20) and calculates the total transaction amount, applying a 20% charge for escrow transactions. It also verifies that the total amount does not exceed a specific threshold (2,000,000). The user&#39;s IP address and browser information are logged, and the transaction details are saved with relevant metadata, including a unique order ID and the associated account state. If any conditions are not met, appropriate error messages are returned.
     * @param transactionRequest  (required)
     * @return ApiResponse&lt;TransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was invalid or malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The user is not authorized to make this request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user does not have permission to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected internal server error occurred. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionResponse> createTransactionTransactionCreateTransactionPostWithHttpInfo(TransactionRequest transactionRequest) throws ApiException {
        okhttp3.Call localVarCall = createTransactionTransactionCreateTransactionPostValidateBeforeCall(transactionRequest, null);
        Type localVarReturnType = new TypeToken<TransactionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Transaction (asynchronously)
     * This endpoint allows authenticated users to create a transaction by submitting a request with the necessary details. The endpoint ensures that the user&#39;s access level permits transaction creation and enforces a rate limit of 30 requests. It checks that the number of products is within the allowed range (1-20) and calculates the total transaction amount, applying a 20% charge for escrow transactions. It also verifies that the total amount does not exceed a specific threshold (2,000,000). The user&#39;s IP address and browser information are logged, and the transaction details are saved with relevant metadata, including a unique order ID and the associated account state. If any conditions are not met, appropriate error messages are returned.
     * @param transactionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was invalid or malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The user is not authorized to make this request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user does not have permission to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected internal server error occurred. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTransactionTransactionCreateTransactionPostAsync(TransactionRequest transactionRequest, final ApiCallback<TransactionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTransactionTransactionCreateTransactionPostValidateBeforeCall(transactionRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTransactionTransactionDeleteTransactionDelete
     * @param deleteTransactionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was invalid or malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The user is not authorized to make this request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user does not have permission to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected internal server error occurred. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTransactionTransactionDeleteTransactionDeleteCall(DeleteTransactionRequest deleteTransactionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteTransactionRequest;

        // create path and map variables
        String localVarPath = "/transaction/delete-transaction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTransactionTransactionDeleteTransactionDeleteValidateBeforeCall(DeleteTransactionRequest deleteTransactionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deleteTransactionRequest' is set
        if (deleteTransactionRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteTransactionRequest' when calling deleteTransactionTransactionDeleteTransactionDelete(Async)");
        }

        return deleteTransactionTransactionDeleteTransactionDeleteCall(deleteTransactionRequest, _callback);

    }

    /**
     * Delete Transaction
     * This endpoint allows authenticated users to delete a transaction by submitting a request with the necessary details. The endpoint checks the user&#39;s access level to ensure they have permission to delete transactions and enforces a rate limit of 30 requests. It verifies that the transaction belongs to the user and has not already been deleted or withdrawn. If the transaction is paid and has a payment reference, it processes refunds and updates the user&#39;s account balance accordingly.
     * @param deleteTransactionRequest  (required)
     * @return DeleteTransactionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was invalid or malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The user is not authorized to make this request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user does not have permission to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected internal server error occurred. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public DeleteTransactionResponse deleteTransactionTransactionDeleteTransactionDelete(DeleteTransactionRequest deleteTransactionRequest) throws ApiException {
        ApiResponse<DeleteTransactionResponse> localVarResp = deleteTransactionTransactionDeleteTransactionDeleteWithHttpInfo(deleteTransactionRequest);
        return localVarResp.getData();
    }

    /**
     * Delete Transaction
     * This endpoint allows authenticated users to delete a transaction by submitting a request with the necessary details. The endpoint checks the user&#39;s access level to ensure they have permission to delete transactions and enforces a rate limit of 30 requests. It verifies that the transaction belongs to the user and has not already been deleted or withdrawn. If the transaction is paid and has a payment reference, it processes refunds and updates the user&#39;s account balance accordingly.
     * @param deleteTransactionRequest  (required)
     * @return ApiResponse&lt;DeleteTransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was invalid or malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The user is not authorized to make this request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user does not have permission to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected internal server error occurred. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteTransactionResponse> deleteTransactionTransactionDeleteTransactionDeleteWithHttpInfo(DeleteTransactionRequest deleteTransactionRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteTransactionTransactionDeleteTransactionDeleteValidateBeforeCall(deleteTransactionRequest, null);
        Type localVarReturnType = new TypeToken<DeleteTransactionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Transaction (asynchronously)
     * This endpoint allows authenticated users to delete a transaction by submitting a request with the necessary details. The endpoint checks the user&#39;s access level to ensure they have permission to delete transactions and enforces a rate limit of 30 requests. It verifies that the transaction belongs to the user and has not already been deleted or withdrawn. If the transaction is paid and has a payment reference, it processes refunds and updates the user&#39;s account balance accordingly.
     * @param deleteTransactionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was invalid or malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The user is not authorized to make this request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user does not have permission to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected internal server error occurred. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTransactionTransactionDeleteTransactionDeleteAsync(DeleteTransactionRequest deleteTransactionRequest, final ApiCallback<DeleteTransactionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTransactionTransactionDeleteTransactionDeleteValidateBeforeCall(deleteTransactionRequest, _callback);
        Type localVarReturnType = new TypeToken<DeleteTransactionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOneTransactionTransactionGetOneTransactionGet
     * @param orderId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was invalid or malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The user is not authorized to make this request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user does not have permission to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected internal server error occurred. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOneTransactionTransactionGetOneTransactionGetCall(String orderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transaction/get-one-transaction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (orderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_id", orderId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOneTransactionTransactionGetOneTransactionGetValidateBeforeCall(String orderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling getOneTransactionTransactionGetOneTransactionGet(Async)");
        }

        return getOneTransactionTransactionGetOneTransactionGetCall(orderId, _callback);

    }

    /**
     * Get One Transaction
     * This endpoint allows authenticated users to retrieve the details of a specific transaction using the order ID. The endpoint ensures the user has read access and enforces a rate limit of 30 requests. It checks if the transaction exists in the database and if the user has the appropriate access rights,then provides a checkout URL for the transaction and others informations
     * @param orderId  (required)
     * @return GetOneTransaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was invalid or malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The user is not authorized to make this request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user does not have permission to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected internal server error occurred. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public GetOneTransaction getOneTransactionTransactionGetOneTransactionGet(String orderId) throws ApiException {
        ApiResponse<GetOneTransaction> localVarResp = getOneTransactionTransactionGetOneTransactionGetWithHttpInfo(orderId);
        return localVarResp.getData();
    }

    /**
     * Get One Transaction
     * This endpoint allows authenticated users to retrieve the details of a specific transaction using the order ID. The endpoint ensures the user has read access and enforces a rate limit of 30 requests. It checks if the transaction exists in the database and if the user has the appropriate access rights,then provides a checkout URL for the transaction and others informations
     * @param orderId  (required)
     * @return ApiResponse&lt;GetOneTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was invalid or malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The user is not authorized to make this request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user does not have permission to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected internal server error occurred. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOneTransaction> getOneTransactionTransactionGetOneTransactionGetWithHttpInfo(String orderId) throws ApiException {
        okhttp3.Call localVarCall = getOneTransactionTransactionGetOneTransactionGetValidateBeforeCall(orderId, null);
        Type localVarReturnType = new TypeToken<GetOneTransaction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get One Transaction (asynchronously)
     * This endpoint allows authenticated users to retrieve the details of a specific transaction using the order ID. The endpoint ensures the user has read access and enforces a rate limit of 30 requests. It checks if the transaction exists in the database and if the user has the appropriate access rights,then provides a checkout URL for the transaction and others informations
     * @param orderId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was invalid or malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The user is not authorized to make this request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user does not have permission to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected internal server error occurred. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOneTransactionTransactionGetOneTransactionGetAsync(String orderId, final ApiCallback<GetOneTransaction> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOneTransactionTransactionGetOneTransactionGetValidateBeforeCall(orderId, _callback);
        Type localVarReturnType = new TypeToken<GetOneTransaction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTransactionsTransactionGetTransactionsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was invalid or malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The user is not authorized to make this request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user does not have permission to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionsTransactionGetTransactionsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transaction/get-transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransactionsTransactionGetTransactionsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getTransactionsTransactionGetTransactionsGetCall(_callback);

    }

    /**
     * Get Transactions
     * This endpoint allows authenticated users to retrieve a list of their visible transactions, up to a maximum of 50. The endpoint enforces a rate limit of 30 requests and ensures the user has read access.
     * @return GetAllTransaction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was invalid or malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The user is not authorized to make this request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user does not have permission to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllTransaction getTransactionsTransactionGetTransactionsGet() throws ApiException {
        ApiResponse<GetAllTransaction> localVarResp = getTransactionsTransactionGetTransactionsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Transactions
     * This endpoint allows authenticated users to retrieve a list of their visible transactions, up to a maximum of 50. The endpoint enforces a rate limit of 30 requests and ensures the user has read access.
     * @return ApiResponse&lt;GetAllTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was invalid or malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The user is not authorized to make this request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user does not have permission to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAllTransaction> getTransactionsTransactionGetTransactionsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getTransactionsTransactionGetTransactionsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetAllTransaction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Transactions (asynchronously)
     * This endpoint allows authenticated users to retrieve a list of their visible transactions, up to a maximum of 50. The endpoint enforces a rate limit of 30 requests and ensures the user has read access.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request was invalid or malformed. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The user is not authorized to make this request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The user does not have permission to access this resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource could not be found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An unexpected internal server error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionsTransactionGetTransactionsGetAsync(final ApiCallback<GetAllTransaction> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTransactionsTransactionGetTransactionsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetAllTransaction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
